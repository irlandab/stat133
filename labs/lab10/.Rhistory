})
test_that("range value for numeric vectors with NAs", {
y <- c(1, 2, 3, 4, NA)
expect_length(stat_range(y), 1)
expect_equal(stat_range(y), NA_real_)
})
test_that("range value for logical vectors", {
z <- c(TRUE, FALSE, TRUE)
expect_length(stat_range(z), 1)
expect_type(stat_range(z), "integer")
expect_equal(stat_range(z), 1L)
})
test_that("range value for logical vectors", {
z <- c(TRUE, FALSE, TRUE)
expect_length(stat_range(z), 1)
expect_type(stat_range(z), "integer")
expect_equal(stat_range(z), 1L)
})
w <- letters[1:5]
stat_range(w)
test_that("range value for non-numeric vectors", {
w <- letters[1:5]
expect_error(stat_range(z))
})
#' @title Centers
#' @description Computes measures of center such as Median and Mean
#' @param x numeric vector
#' @return a numeric vector with median and mean
stat_range <- function(x) {
y <- c(0, 0)
y[1] <- median(x)
y[2] <- mean(x)
names(y) <- c("Median", "Mean")
return(y)
}
#' @title Centers
#' @description Computes measures of center such as Median and Mean
#' @param x numeric vector
#' @return a numeric vector with median and mean
stat_centers <- function(x) {
y <- c(0, 0)
y[1] <- median(x)
y[2] <- mean(x)
names(y) <- c("Median", "Mean")
return(y)
}
x <- c(1, 2, 3, 4, 5)
stat_centers(x)
context("Test for center values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 2)
expect_type(stat_range(x), 'double')
})
context("Test for center values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), c(3, 3))
expect_length(stat_range(x), 2)
expect_type(stat_range(x), 'double')
})
context("Test for center values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), c("Median" = 3, "Mean" = 3))
expect_length(stat_range(x), 2)
expect_type(stat_range(x), 'double')
})
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(testthat)
#' @title Range
#' @description Computes overall range: max - min
#' @param x numeric vector
#' @return computed range
stat_range <- function(x) {
max(x) - min(x)
}
# assuming that your working directory is "lab09/"
library(testthat)
test_file("tests.R")
test_that("range value for numeric vectors with NAs", {
y <- c(1, 2, 3, 4, NA)
expect_length(stat_range(y), 1)
expect_equal(stat_range(y), NA_real_)
})
test_that("range value for logical vectors", {
z <- c(TRUE, FALSE, TRUE)
expect_length(stat_range(z), 1)
expect_type(stat_range(z), "integer")
expect_equal(stat_range(z), 1L)
})
test_that("range value for non-numeric vectors", {
w <- letters[1:5]
expect_error(stat_range(z))
})
#' @title Centers
#' @description Computes measures of center such as Median and Mean
#' @param x numeric vector
#' @return a numeric vector with median and mean
stat_centers <- function(x) {
y <- c(0, 0)
y[1] <- median(x)
y[2] <- mean(x)
names(y) <- c("Median", "Mean")
return(y)
}
context("Test for center values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), c("Median" = 3, "Mean" = 3))
expect_length(stat_range(x), 2)
expect_type(stat_range(x), 'double')
})
head(USArrests)
states <- rownames(USArrests)
head(states)
# number of characters
# to lower case
# to upper case
# case folding (upper = TRUE)
# case folding (upper = FALSE)
# number of charcaters
num_chars <- nchar(states)
# frequency table
# barchart of number-of-characters
paste('Pumpkin', 'Pie')
paste('a', 'b', 'c', 'd', 'e')
paste('a', 'b', 'c', 'd', 'e', sep = '-')
paste('a', 1:5, sep = '.')
# paste0() -vs- paste(..., sep = "")
paste0('Pumpkin', 'Pie')
paste('Pumpkin', 'Pie', sep = '')
# paste0() is also vectorized
paste0('a', 1:5)
# paste names with their num-of-chars
# collapse first 5 states
# extract first 3 characters
substr('Berkeley', 1, 3)
# shorten state names with first 3 characters
substr(states, 1, 3)
# shorten state names with last 3 characters
# shorten state names with first 3 characters
# 4-char states
states[num_chars == 4]
# 10-char states
states[num_chars == 10]
# collapse 4-char states
paste(states[num_chars == 4], collapse = ", ")
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
# your function temp_convert
# vector of file names
# rename vector of file names
# random vector of letters
set.seed(1)
letrs <- sample(letters, size = 100, replace = TRUE)
head(letrs)
# count number of vowels
# your function count_letters()
?IQR
#' @title Spread measures
#' @description Computes measures of spread: range, IQR, and SD
#' @param x numeric vector
#' @return vector with range, iqr, and stdev
stat_spreads <- function(x) {
y <- c('range' = stat_range(x),
'iqr' = IQR(x),
'stdev' = sd(x))
return(y)
}
stat_spreads(x)
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), c("range.Median" = 3, "range.Mean" = 3, "iqr" = 2, "stdv" = 1.581139))
expect_length(stat_range(x), 4)
expect_type(stat_range(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), c("range.Median" = 3, "range.Mean" = 3, "iqr" = 2, "stdv" = 1.581139))
expect_length(stat_range(x), 3)
expect_type(stat_range(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), c("range.Median" = 3, "range.Mean" = 3, "iqr" = 2, "stdv" = 1.581139))
expect_length(stat_range(x), 2)
expect_type(stat_range(x), 'double')
})
length(stat_spreads(x))
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x), c("range.Median" = 3, "range.Mean" = 3, "iqr" = 2, "stdv" = 1.581139))
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x), c("range" = c("Median" = 3, "Mean" = 3), "iqr" = 2, "stdv" = 1.581139))
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x), c("range" = c("Median" = 3, "Mean" = 3), "iqr" = 2, "stdev" = 1.581139))
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
stat_spreads(x)
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x), c("range" = c("Median" = 3L, "Mean" = 3L), "iqr" = 2, "stdev" = 1.581139))
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x), c("range" = c("Median" = 3.000000, "Mean" = 3.000000), "iqr" = 2, "stdev" = 1.581139))
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x)[3, 4], "iqr" = 2, "stdev" = 1.581139))
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x)[3, 4], "iqr" = 2, "stdev" = 1.581139)
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_spreads(x)[3], "iqr" = 2)
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_length(stat_spreads(x), 4)
expect_type(stat_spreads(x), 'double')
})
# assuming that your working directory is "lab09/"
library(testthat)
test_file("tests.R")
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_length(stat_spreads(x), 3)
expect_type(stat_spreads(x), 'double')
})
# assuming that your working directory is "lab09/"
library(testthat)
test_file("tests.R")
# assuming that your working directory is "lab09/"
library(testthat)
test_file("tests.R")
length(stat_range(x))
# assuming that your working directory is "lab09/"
library(testthat)
test_file("tests.R")
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(testthat)
#' @title Range
#' @description Computes overall range: max - min
#' @param x numeric vector
#' @return computed range
stat_range <- function(x) {
max(x) - min(x)
}
# assuming that your working directory is "lab09/"
library(testthat)
test_file("tests.R")
test_that("range value for numeric vectors with NAs", {
y <- c(1, 2, 3, 4, NA)
expect_length(stat_range(y), 1)
expect_equal(stat_range(y), NA_real_)
})
test_that("range value for logical vectors", {
z <- c(TRUE, FALSE, TRUE)
expect_length(stat_range(z), 1)
expect_type(stat_range(z), "integer")
expect_equal(stat_range(z), 1L)
})
test_that("range value for non-numeric vectors", {
w <- letters[1:5]
expect_error(stat_range(z))
})
#' @title Centers measures
#' @description Computes measures of center such as Median and Mean
#' @param x numeric vector
#' @return a numeric vector with median and mean
stat_centers <- function(x) {
y <- c(0, 0)
y[1] <- median(x)
y[2] <- mean(x)
names(y) <- c("Median", "Mean")
return(y)
}
context("Test for center values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_centers(x), c("Median" = 3, "Mean" = 3))
expect_length(stat_centers(x), 2)
expect_type(stat_centers(x), 'double')
})
#' @title Spread measures
#' @description Computes measures of spread: range, IQR, and SD
#' @param x numeric vector
#' @return vector with range, iqr, and stdev
stat_spreads <- function(x) {
y <- c('range' = stat_range(x),
'iqr' = IQR(x),
'stdev' = sd(x))
return(y)
}
stat_spreads(x)
context("Test for spread values")
test_that("centers works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_length(stat_spreads(x), 3)
expect_type(stat_spreads(x), 'double')
})
head(USArrests)
states <- rownames(USArrests)
head(states)
# number of characters
# to lower case
# to upper case
# case folding (upper = TRUE)
# case folding (upper = FALSE)
# number of charcaters
num_chars <- nchar(states)
# frequency table
# barchart of number-of-characters
paste('Pumpkin', 'Pie')
paste('a', 'b', 'c', 'd', 'e')
paste('a', 'b', 'c', 'd', 'e', sep = '-')
paste('a', 1:5, sep = '.')
# paste0() -vs- paste(..., sep = "")
paste0('Pumpkin', 'Pie')
paste('Pumpkin', 'Pie', sep = '')
# paste0() is also vectorized
paste0('a', 1:5)
# paste names with their num-of-chars
# collapse first 5 states
# extract first 3 characters
substr('Berkeley', 1, 3)
# shorten state names with first 3 characters
substr(states, 1, 3)
# shorten state names with last 3 characters
# shorten state names with first 3 characters
# 4-char states
states[num_chars == 4]
# 10-char states
states[num_chars == 10]
# collapse 4-char states
paste(states[num_chars == 4], collapse = ", ")
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
# your function temp_convert
# vector of file names
# rename vector of file names
# random vector of letters
set.seed(1)
letrs <- sample(letters, size = 100, replace = TRUE)
head(letrs)
# count number of vowels
# your function count_letters()
# number of characters
nchar(states)
# to lower case
tolower(states)
# to upper case
toupper(states)
# to lower case
head(
tolower(states)
)
# to upper case
head(
toupper(states)
)
# case folding (upper = TRUE)
head(
casefold(states, upper = T)
)
# case folding (upper = FALSE)
head(
casefold(states, upper = F)
)
# number of charcaters
num_chars <- nchar(states)
# frequency table
table(num_chars)
# barchart of number-of-characters
# frequency table
char_freqs <- table(num_chars)
char_freqs
# barchart of number-of-characters
barplot(char_freqs, las = 1, border = NA)
paste('Pumpkin', 'Pie')
paste('a', 'b', 'c', 'd', 'e')
paste('a', 'b', 'c', 'd', 'e', sep = '-')
paste('a', 1:5, sep = '.')
# paste0() -vs- paste(..., sep = "")
paste0('Pumpkin', 'Pie')
paste('Pumpkin', 'Pie', sep = '')
# paste0() is also vectorized
paste0('a', 1:5)
# paste names with their num-of-chars
paste(states, "=", num_chars)
# paste names with their num-of-chars
paste(states[1:5], "=", num_chars[1:5])
# collapse first 5 states
paste(states[1:5], collapse = '')
# extract first 3 characters
substr('Berkeley', 1, 3)
# shorten state names with first 3 characters
substr(states, 1, 3)
# shorten state names with last 3 characters
substr(states, num_chars - 2, num_chars)
# shorten state names with first 3 characters
paste0(substr(states, 1, 1),
substr(states, num_chars - 2, num_chars))
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'lab10-images/')
utils:::menuInstallPkgs(type="source")
# install.packages("devtools")
# devtools::install_github("dkahle/ggmap")
# devtools::install_github("hadley/ggplot2")
install.packages("stringr", type = "source")
# install.packages("plotly")
install.packages("stringi", type = "source")
library(stringi)
library(dplyr)
library(stringr)
library(ggmap)
library(plotly)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'lab10-images/')
# install.packages("devtools")
# devtools::install_github("dkahle/ggmap")
# devtools::install_github("hadley/ggplot2")
install.packages("stringr", type = "source")
# install.packages("plotly")
install.packages("stringi", type = "source")
library(stringi)
library(dplyr)
library(stringr)
library(ggmap)
library(plotly)
install.packages("stringi", type = "source")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'lab10-images/')
#remove.packages("data.table")
#install.packages("data.table")
library(data.table)
library(plotly)
plot_ly(x = names(day_freqs),
y = day_freqs,
type = 'bar')
remove.packages("data.table")
install.packages("data.table")
